#!/bin/bash
set -euo pipefail

# shellcheck source=share/common.sh
. $LETSENCRYPT_SHAREDIR/common.sh

DOMAINNAME="$1"
SELFLINK="$2"
keyfile_="$(keyfile "$DOMAINNAME")"
certfile_="$(certfile "$DOMAINNAME")"
fullchainfile_="$(fullchainfile "$DOMAINNAME")"

pidfile=$LETSENCRYPT_DATADIR/get_certificate.pid

verify_domainname() {
   if [ ${#DOMAINNAME} -gt 63 ]; then
      log "domains with more than 63 characters are not supported"
      return 1
   fi
}

get_old_certificate() {
    if ! [ -f "$certfile_" ] || ! [ -f "$keyfile_" ] || ! [ -f "$fullchainfile_" ]
    then
        get_certs_from_route "$DOMAINNAME" "$SELFLINK"\
	    || log "no old certificate found"
    fi
}

check_api_key() {
   if ! [ -f "$LETSENCRYPT_ACCOUNTSECRETDIR/account-key" ]; then
      log "No account key found. Be sure to mount secret \`letsencrypt-creds\` in $LETSENCRYPT_ACCOUNTSECRETDIR"
      return 1
   fi
}

get_new_certificate() {
    check_api_key
    log "calling dehydrated with domain name '$DOMAINNAME'"
    dehydrated \
        --domain "$DOMAINNAME" \
        --challenge http-01 \
        --algo "$LETSENCRYPT_KEYTYPE" \
        --out "$LETSENCRYPT_DATADIR" \
        --privkey "$LETSENCRYPT_ACCOUNTSECRETDIR/account-key" \
        --hook "$LETSENCRYPT_LIBEXECDIR/dehydrated-hook" \
        --config "$LETSENCRYPT_SHAREDIR/config" \
        --cron
}

cleanup_well_known_route() {
    delete_well_known_route "$DOMAINNAME"
}

setup_well_known_route() {
    local route_name; route_name="$(well_known_route_name "$DOMAINNAME")"

    if route_exists "$route_name"; then
        log "Deleting well-known route."
        delete_well_known_route "$DOMAINNAME"
    fi

    log "Adding well-known route."
    add_well_known_route "$DOMAINNAME"

    # sleep for max 60s waiting for admitted route
    for ((i=30; i > 0; i--)); do
        sleep 2s
        if route_is_valid "$DOMAINNAME"; then
            return 0
        fi
    done

    log "Route $route_name not admitted."
    return 1
}

# Try to get lock
exec 201>"$pidfile"
flock -x 201

verify_domainname
get_old_certificate
if crt_valid_long_enough "$certfile_"; then
    log "Certificate for $DOMAINNAME still valid long enough."
else
    log "Getting new certificate for $DOMAINNAME"
    setup_well_known_route
    trap cleanup_well_known_route EXIT
    get_new_certificate "$DOMAINNAME"
fi
add_certificate_to_route "$DOMAINNAME" "$SELFLINK"
